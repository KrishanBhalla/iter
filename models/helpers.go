package models

import (
	"encoding/json"

	"github.com/dgraph-io/badger"
)

// get will return the first matching record from a kv store lookup
// 1) If the record is found, we will return a nil error
// 2) If the record is not found, we will return ErrKeyNotFound
// 3) If any other error occurs, we will return and error with more information
// about what went wrong. This may not be generated by the errors package
func get(db *badger.DB, key string, dst interface{}) error {

	var data = make([]byte, 0)
	err := db.View(func(txn *badger.Txn) error {
		item, err := txn.Get([]byte(key))
		if err != nil {
			return err
		}
		err = item.Value(func(val []byte) error {
			// This func with val would only be called if item.Value encounters no error.
			copy(data, val)
			return nil
		})
		return err
	})

	if err != nil {
		return err
	}
	return json.Unmarshal(data, dst)
}

func getAll(db *badger.DB, dst interface{}) error {
	data := make([]byte, 0)
	err := db.View(func(txn *badger.Txn) error {
		it := txn.NewIterator(badger.DefaultIteratorOptions)
		defer it.Close()
		for it.Rewind(); it.Valid(); it.Next() {
			item := it.Item()
			err := item.Value(func(v []byte) error {
				data = append(data, v...)
				return nil
			})
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		return err
	}
	json.Unmarshal(data, dst)
	return nil
}

type DbCloser interface {
	CloseDB() error
}
