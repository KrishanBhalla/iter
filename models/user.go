package models

import (
	"encoding/json"

	"github.com/dgraph-io/badger"
)

// User implements the User table for
// storing account data - this consists of
// the Email and hashed password
type User struct {
	Email        string `json:"email"`
	Password     string
	PasswordHash string `json:"passwordHash"`
	Remember     string
	RememberHash string `json:"rememberHash"`
}

// UserDB is userd to interact with the users database.
// For pretty much all single user queries:
// 1) If the user is found, we will return a nil error
// 2) If the user is not found, we will return ErrNotFound
// 3) If any other error occurs, we will return and error
// with more information about what went wrong.
// This may not be generated by the errors package
//
// For single user queries any error by ErrNotFound should probably
// result in a 500 error
type UserDB interface {
	ByEmail(email string) (*User, error)
	// For cookies
	ByRemember(token string) (*User, error)

	// Methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(email string) error
	DbCloser
}

// Define userDB and ensure it implements UserDB
var _ UserDB = &userDB{}

type userDB struct {
	db *badger.DB
}

// ByEmail returns an error if the user is not in the db
// else it returns the user associated with the email
func (udb *userDB) ByEmail(email string) (*User, error) {
	var user User
	err := get(udb.db, email, user)
	return safeReturnUser(&user, err)
}

// ByRemember returns an error if the user is not in the db
// else it returns the user associated with the rememberHash
func (udb *userDB) ByRemember(rememberHash string) (*User, error) {
	var email string
	err := get(udb.db, rememberHash, email)
	if err != nil {
		return nil, err
	}
	var user User
	err = get(udb.db, email, user)
	return safeReturnUser(&user, err)
}

// Create will create the provided user and backfill data
func (udb *userDB) Create(user *User) error {
	return udb.Update(user)
}

func (udb *userDB) Update(user *User) error {
	err := udb.db.Update(func(txn *badger.Txn) error {
		userBytes, err := json.Marshal(&user)
		if err != nil {
			return err
		}
		err = txn.Set([]byte(user.Email), userBytes)
		return err
	})
	if err != nil {
		return err
	}

	err = udb.db.Update(func(txn *badger.Txn) error {
		if err != nil {
			return err
		}
		err = txn.Set([]byte(user.RememberHash), []byte(user.Email))
		return err
	})
	return err
}

func (udb *userDB) Delete(email string) error {
	err := udb.db.Update(func(txn *badger.Txn) error {
		err := txn.Delete([]byte(email))
		return err
	})
	if err != nil {
		return err
	}
	var user User
	err = get(udb.db, email, user)
	if err != nil {
		return err
	}
	err = udb.db.Update(func(txn *badger.Txn) error {
		err := txn.Delete([]byte(user.RememberHash))
		return err
	})
	return err
}

func (udb *userDB) CloseDB() error {
	return udb.db.Close()
}

// ------------------------------------------------
// Helpers ----------------------------------------
// ------------------------------------------------

func safeReturnUser(user *User, err error) (*User, error) {
	if err != nil {
		return nil, err
	}
	return user, nil
}
