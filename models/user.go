package models

import "github.com/dgraph-io/badger"

// User implements the User table for
// storing account data - this consists of
// the Email and hashed password
type User struct {
	Email        string `json:"email"`
	Password     string
	PasswordHash string `json:"passwordHash"`
	Remember     string
	RememberHash string `json:"rememberHash"`
}

// UserDB is userd to interact with the users database.
// For pretty much all single user queries:
// 1) If the user is found, we will return a nil error
// 2) If the user is not found, we will return ErrNotFound
// 3) If any other error occurs, we will return and error
// with more information about what went wrong.
// This may not be generated by the errors package
//
// For single user queries any error by ErrNotFound should probably
// result in a 500 error
type UserDB interface {
	// Methods for querying for single users
	ByID(id uint) (*User, error)
	ByEmail(email string) (*User, error)
	// For cookies
	ByRemember(token string) (*User, error)

	// Methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error
}

// Define userDB and ensure it implements UserDB
var _ UserDB = &userDB{}

type userDB struct {
	db *badger.DB
}

// ByID returns an error if the user is not in the db
// else it returns the user associated with the id
func (udb *userDB) ByID(id uint) (*User, error) {
	var userBytes = make([]byte)
	err := udb.db.View(func(txn *badger.Tx) error {
		user, err := txn.Get([]byte(id))
		if err != nil {
			return err
		}
		copy(userBytes, user)
		return nil
	}
	if err != nil {
		return nil, err
	}
	
	var user User
	err := first(db, &user)
	return safeReturnUser(&user, err)


// ByEmail returns an error if the user is not in the db
// else it returns the user associated with the email
func (udb *userDB) ByEmail(email string) (*User, error) {
	db := udb.db.Where("email = ?", email)
	var user User
	err := first(db, &user)
	return safeReturnUser(&user, err)
}

// ByRemember returns an error if the user is not in the db
// else it returns the user associated with the rememberHash
func (udb *userDB) ByRemember(rememberHash string) (*User, error) {
	db := udb.db.Where("remember_hash = ?", rememberHash)
	var user User
	err := first(db, &user)
	return safeReturnUser(&user, err)
}

// Create will create the provided user and backfill data
// like the ID, CreatedAt and UpdatedAt fields.
func (udb *userDB) Create(user *User) error {
	return udb.db.Create(user).Error
}

func (udb *userDB) Update(user *User) error {
	return udb.db.Save(&user).Error
}

func (udb *userDB) Delete(id uint) error {
	return udb.db.Delete(&User{}, id).Error
}

// ------------------------------------------------
// Helpers ----------------------------------------
// ------------------------------------------------

func safeReturnUser(user *User, err error) (*User, error) {
	if err != nil {
		return nil, err
	}
	return user, nil
}
